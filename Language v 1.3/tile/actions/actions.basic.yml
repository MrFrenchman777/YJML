# Tile creation

_createTile:
  args:
    template_tile_id: TILE_ID
  return:
    tile: TILE


# **Tile updating actions:** 

  # Create new branch

  _createBranch:
    args:
      runtime_tile: TILE_ID
    return:
      branch_id: TILE_ID
      main_id: TILE_ID 

  # Edit branch

  _editBranch:
    args:
      branch_id: TILE_ID 
      branch_content: TILE_CONTENT
      branch_diff: ##diff that user wants to make
    return:
      updated_branch: TILE

  # Commit Branch

  _commitBranch:
    args:
      branch_id: TILE_ID 
    return:
      commited_branch_id: TILE_ID

  # Merge

  _mergeBranch:
    args:
      branch_id: TILE_ID 
      main_id: TILE_ID 
    return:
      new_main: TILE_ID 

  # Approve standBy version

  _approveSBVersion:
    args:
      main_id: TILE_ID
      procedure:
        procedure_ID: TILE_ID #tile which describes valid voting procedure
        procedure_outcome: bool
    return:
      stand_by_tile: TILE

  # Approve runtime version

  _approveRTVersion:
    args:
      stand_by_tile: TILE_ID
      procedure:
        procedure_ID: TILE_ID #tile which describes valid voting procedure
        procedure_outcome: bool
    return:
      runtime_tile_new: TILE  
         
# **Roles updating actions:**

# Invite to role (actually shortcut for)
    _checkUser:
      args:
        name: string 
        surname: 
        date_of_birth:
        city:
        mail:
        tags: [string]
      return:
        user_status: bool 
        user_id: USER_ID # if their privacy settings allow
    
    _inviteInternalToRole:
      args:
        role: ROLE_NAME 
        tile_id: TILE_ID
        actor: USER_ID
      return:
        invitation_sent: bool

    _inviteExternalToRole:
      args:
        role: ROLE_NAME 
        tile_id: TILE_ID
        actor: string
      return:
        invitation_link: INVITATION_LINK # with rights to access forms

# So invite to role      

  _inviteToRole:
    args:
      role: ROLE_NAME 
      tile_id: TILE_ID
      actor:
        internal: USER_ID
        external: string #name
    return:
      invitation_sent: bool 
      invitation_link: INVITATION_LINK #if role requires filling forms invitation redirects?

  # Accept role

  _acceptRole:
    args:
      role: ROLE_NAME
      tile_id: TILE_ID
    return:
      role: ROLE # whole role object with information about who plays this role now 

  # Decline role
  _declineRole:
    args:
      role: ROLE_NAME
      tile_id: TILE_ID
    return:
      role: ROLE # with free status 

  
  # Apply to role

  _applyToRole:
    args:
      role: ROLE_NAME
      tile_id: TILE_ID
      params: [{key:value}] # specified in tile (it is shortcut)
    return:
      application_sent: bool
 
  # Remove from role

  _removeFromRole:
    args:
      role: ROLE_NAME
      tile_id: TILE_ID
      actor: USER_ID
    return:
      role_status: free
      

  # *#Accept application*

  _acceptApplication:
    args:
      role: ROLE_ID
      actor: USER_ID
      tile: TILE_ID
    return:
      role: ROLE

  # *#Update application

  _updateApplication:
    args:
      role: ROLE_ID
      actor: USER_ID
      tile: TILE_ID
    return:
      role: ROLE

  # *#Decline application*

  _declineApplication:
    args:
      role: ROLE_ID
      actor: USER_ID
      tile: TILE_ID
    return:
      role_status: free
      notification_sent: bool #and your standard letter specifien in tile maybe...

# **Events:**

  # Create events

  _createEvent:
    args:
      title: !string
      description: !string 
      tile: TILE_ID
      rule: RULE_NAME
      witnesses: [USER_ID]
      evidence_type: rumor|firsthand|media
      evidence_text: !string
      evidence_media: [file]
      evidence_link: !href
    return:
      new_event: EVENT_REPORTED

  # Edit event

  _editEvent:
    args:
      event_id: EVENT_ID 
      modification: 
        description: !string 
        media: [file]
        witnesses: [USER_ID]
    return:
      event: EVENT_REPORTED

  # Give evidence

  _giveEvidence:
    args: 
      event_id: EVENT_REPORTED_ID
      witness: bool
      evidence_type: rumor|firsthand|media
      evidence_side: pro|contra
      evidence: 
    return:
      event: EVENT_REPORTED

  # Evaluate event

  _evaluateEvent:
    args:
      event_id: EVENT_REPORTED_ID
      tile_id: TILE_ID
      rule: RULE_NAME
      actor: USER_ID #Who will get evaluation he-he-he
      scale:
        scale_id: SCALE_ID
        scale_title: TITLE
        amount: amount
    return:
      rating_event: RATING_EVENT
  
# **Profile:**

  # Create profile

  _createProfile:
    args:
      user_id: USER_ID
      tile_id: TILE_ID
      params: [{key:value}]
    return:
      user_profile: PROFILE

  # Update profile

  _updateProfile:
    args:
      user_id: USER_ID
      tile_id: TILE_ID
      params: [{key:value}]
    return:
      user_profile: PROFILE


# **Processes

  _initiatePlayOut:
    args:
      tile_id: TILE_ID
      params: [{key:value}]
      roles: [ROLE,USER_ID] #if there is no automatic rule for such situations
    return:
      invitation_sent: [bool]

  # Vote

  _vote:
    args:
      tile_id: TILE_ID
      agenda: STRING
    return:
      vote: bool
  
  # Count votes

  _countVotes:
    args:
      tile_id: TILE_ID
    return:
      result: FORM_ID

  # Announce decision

  _announceDecision:
    args:
      tile_id: TILE_ID
      result: FORM_ID
    return:
      announce: POST